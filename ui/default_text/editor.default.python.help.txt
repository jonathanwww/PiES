# import the functions you need
from numpy import cos, sin
from CoolProp.CoolProp import PropsSI

# Here's how you can define a function. 
# The decorator is for setting the units
# The first argument is a list of units for the inputs, the second is a unit for the output
@units(['meter', 'second'], 'dimensionless')
def test(x,y,str_input):
   return x+y if str_input == "add" else 0


# If you want to set the unit type for an imported function,
# you can wrap it like so:
@units(['radians'], 'dimensionless')
def radians_cos(x):
    return cos(x)

# You can also create differential equations with a function.
# Mark it with the decorator, then it will be passed to the
# differential equation solver. You can use multiple decorators
@units(['second', 'meter'], 'dimensionless')
@differentiaL_equation
def my_differential_equation(t, y):
    dydt = t * y
    return dydt

# instantiate a grid and add variables to it
# They must be defined in the eq window
grid = Grid()
grid.assign('x', [1, 2, 3])
grid.assign('k', [i for i in range(100)])
# if you use strings, you can only use the variable inside function calls
grid.assign('s', ['water', 'gas', 'pressure'])


# got a list of variable and lists?
# import variables and their lists from a CSV file
# make sure you have rows for _ cols for _ 
variables, lists = solver.import_from_csv('variables.csv')
for variable, list in zip(variables, lists):
    grid.assign(variable, list)

# create an array variable which can be accessed by index in the equation window
# it gets converted to a numpy array, so you can use slicing etc
# or import from a csv into a ndarray directly for example
# also a way to set the value to a given attribute; if variable, set value to x0 or lb f.ex?
# parameter can be strings etc, but is not variables
# parameters will not be solved for, its just a list of constants
# variables will be solved for
data_arrays = DataArrays()
data_arrays.assign(name='b', type='parameter', values=[[1,2,3],[1,2,3]])
data_arrays.assign(name='b', type='variable', values=[[1,2,3],[1,2,3]])